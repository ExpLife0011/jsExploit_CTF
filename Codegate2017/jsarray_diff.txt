*** jsarray.cpp.org	2017-02-22 08:50:58.870782358 -0800
--- jsarray.cpp	2017-02-09 03:09:38.000000000 -0800
*************** js::array_pop(JSContext *cx, unsigned ar
*** 1937,1977 ****
      RootedObject obj(cx, ToObject(cx, args.thisv()));
      if (!obj)
          return false;
  
      /* Steps 2-3. */
      uint32_t index;
      if (!GetLengthProperty(cx, obj, &index))
          return false;
  
      /* Steps 4-5. */
!     if (index == 0) {
!         /* Step 4b. */
!         args.rval().setUndefined();
!     } else {
          /* Step 5a. */
          index--;
  
          /* Step 5b, 5e. */
          JSBool hole;
          if (!GetElement(cx, obj, index, &hole, args.rval()))
              return false;
  
          /* Step 5c. */
          if (!hole && !DeletePropertyOrThrow(cx, obj, index))
              return false;
!     }
  
      // Keep dense initialized length optimal, if possible.  Note that this just
      // reflects the possible deletion above: in particular, it's okay to do
      // this even if the length is non-writable and SetLengthProperty throws.
!     if (obj->isNative() && obj->getDenseInitializedLength() > index)
          obj->setDenseInitializedLength(index);
  
      /* Steps 4a, 5d. */
      return SetLengthProperty(cx, obj, index);
  }
  
  void
  js::ArrayShiftMoveElements(JSObject *obj)
  {
      JS_ASSERT(obj->isArray());
--- 1937,1974 ----
      RootedObject obj(cx, ToObject(cx, args.thisv()));
      if (!obj)
          return false;
  
      /* Steps 2-3. */
      uint32_t index;
      if (!GetLengthProperty(cx, obj, &index))
          return false;
  
      /* Steps 4-5. */
! 
          /* Step 5a. */
          index--;
  
          /* Step 5b, 5e. */
          JSBool hole;
          if (!GetElement(cx, obj, index, &hole, args.rval()))
              return false;
  
          /* Step 5c. */
          if (!hole && !DeletePropertyOrThrow(cx, obj, index))
              return false;
! 
  
      // Keep dense initialized length optimal, if possible.  Note that this just
      // reflects the possible deletion above: in particular, it's okay to do
      // this even if the length is non-writable and SetLengthProperty throws.
!     if (obj->isNative())
          obj->setDenseInitializedLength(index);
  
      /* Steps 4a, 5d. */
      return SetLengthProperty(cx, obj, index);
  }
  
  void
  js::ArrayShiftMoveElements(JSObject *obj)
  {
      JS_ASSERT(obj->isArray());
